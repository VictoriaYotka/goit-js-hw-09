{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiBC,UAAUC,IAAI,OAEtC,MAAMC,EAAa,GAEnB,IAAIC,EAAY,KAkChB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCT,EAAYU,YAAW,KACfH,EACJF,EAAS,C,SAAEH,E,MAAUC,IAErBG,EAAQ,C,SAAEJ,E,MAAUC,GAAQ,GACxBA,EAAM,G,CAzChBV,EAAOkB,iBAAiB,UAExB,SAA4BC,GAC1BA,EAAMC,iBAqBR,SAA2BD,GACzBb,EAAWI,MAAQW,OAAOF,EAAMG,cAAcC,SAASb,MAAMc,OAC7DlB,EAAWmB,KAAOJ,OAAOF,EAAMG,cAAcC,SAASE,KAAKD,OAC3DlB,EAAWoB,OAASL,OAAOF,EAAMG,cAAcC,SAASG,OAAOF,M,CAtB/DG,CAAiBR,GAEjB,IAAMT,MAAAkB,EAAKH,KAAEA,EAAIC,OAAEA,GAAWpB,EAE9B,IAAK,IAAIuB,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EACrDrB,EAAcqB,EAAUD,GACrBE,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBZ,EAAAiC,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEhEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MACnBZ,EAAAiC,OAAOG,QAAQ,sBAAoBzB,QAAeC,MAAU,IAG7DkB,GAASH,EAETN,EAAMG,cAAca,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nconst promiseObj = {};\n\nlet timeoutId = null;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler (event) {\n  event.preventDefault();\n\n  formValuesPicker(event);\n\n  let { delay, step, amount } = promiseObj;\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);      \n      }) \n\n      delay += step;\n\n      event.currentTarget.reset()\n  }     \n}\n\nfunction formValuesPicker (event) {\n  promiseObj.delay = Number(event.currentTarget.elements.delay.value);\n  promiseObj.step = Number(event.currentTarget.elements.step.value);\n  promiseObj.amount = Number(event.currentTarget.elements.amount.value);\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n      resolve ({ position, delay });\n      } else {\n      reject ({ position, delay });\n      }}, delay)        \n  }) \n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","lastElementChild","classList","add","$47d4ff9957288465$var$promiseObj","$47d4ff9957288465$var$timeoutId","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","Number","currentTarget","elements","value","step","amount","$47d4ff9957288465$var$formValuesPicker","delay1","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.614f9cbd.js.map"}