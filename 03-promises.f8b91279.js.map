{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiBC,UAAUC,IAAI,OAEtC,IAAMC,EAAa,GAoCnB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC7B,IAAMC,EAAgBC,KAAKC,SAAW,GAE1BC,YAAW,WACfH,EACJF,EAAS,CAAEH,WAAUC,UAErBG,EAAQ,CAAEJ,WAAUC,S,GAChBA,E,IAzCVT,EAAOiB,iBAAiB,UAExB,SAA4BC,GAC1BA,EAAMC,iBAqBR,SAA2BD,GACzBZ,EAAWG,MAAQW,OAAOF,EAAMG,cAAcC,SAASb,MAAMc,OAC7DjB,EAAWkB,KAAOJ,OAAOF,EAAMG,cAAcC,SAASE,KAAKD,OAC3DjB,EAAWmB,OAASL,OAAOF,EAAMG,cAAcC,SAASG,OAAOF,M,CAtB/DG,CAAiBR,GAIjB,IAFA,IAAMS,EAAwBrB,EAAxBG,MAAOe,EAAiBlB,EAAjBkB,KAAMC,EAAWnB,EAAXmB,OAEVG,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EACrDrB,EAAcqB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBX,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE9DyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACnBX,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAG3DkB,GAASH,EAETN,EAAMG,cAAce,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nconst promiseObj = {};\n\nlet timeoutId = null;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler (event) {\n  event.preventDefault();\n\n  formValuesPicker(event);\n\n  let { delay, step, amount } = promiseObj;\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);      \n      }) \n\n      delay += step;\n\n      event.currentTarget.reset()\n  }     \n}\n\nfunction formValuesPicker (event) {\n  promiseObj.delay = Number(event.currentTarget.elements.delay.value);\n  promiseObj.step = Number(event.currentTarget.elements.step.value);\n  promiseObj.amount = Number(event.currentTarget.elements.amount.value);\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n      resolve ({ position, delay });\n      } else {\n      reject ({ position, delay });\n      }}, delay)        \n  }) \n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","lastElementChild","classList","add","$ce04d3a99e08e73b$var$promiseObj","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","Number","currentTarget","elements","value","step","amount","$ce04d3a99e08e73b$var$formValuesPicker","delay1","position1","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.f8b91279.js.map"}